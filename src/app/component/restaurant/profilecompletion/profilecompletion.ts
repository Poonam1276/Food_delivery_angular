// src/app/component/restaurant/profilecompletion/profilecompletion.ts

import { Component } from '@angular/core';
import { FormBuilder, FormGroup, ReactiveFormsModule, Validators } from '@angular/forms';
import { CommonModule } from '@angular/common';
import { HttpClientModule } from '@angular/common/http';
import { Router, RouterModule } from '@angular/router'; // ðŸ‘ˆ Added Router
import { RestaurantService } from '../../../services/restaurant.service'; // ðŸ‘ˆ Switched to RestaurantService
Â 
@Component({
Â  selector: 'app-restaurant-profile-completion', // ðŸ‘ˆ Updated selector
Â  standalone: true,
Â  imports: [CommonModule, ReactiveFormsModule, HttpClientModule, RouterModule],
Â  templateUrl: './profilecompletion.html',
Â  styleUrl: './profilecompletion.css' // Assuming the CSS file is renamed or shared
})
export class ProfileCompletion { // Component name remains ProfileCompletion
Â  form: FormGroup;
Â  successMessage = '';
Â  errorMessage = '';
Â 
Â  constructor(
    private fb: FormBuilder, 
    private restaurantService: RestaurantService, // ðŸ‘ˆ Switched to RestaurantService
    private router: Router // ðŸ‘ˆ Injected Router
) {
Â  Â  // Use the correct key used during signup

Â const userId = Number(localStorage.getItem('currentUserId') || localStorage.getItem('userId') || '0');
Â  Â  this.form = this.fb.group({
Â  Â  Â  userId: [userId], // Should be present from signup
Â  Â  Â  address: [''],Â 
Â  Â  Â  pinCode: [''], // Added basic validation
Â  Â  Â  fssaiId: [''],Â 
Â  Â  Â  tradeId: [''],Â 
Â  Â  Â  fssaiImage: [null], // Stores the File object
Â  Â  Â  tradelicenseImage: [null] // Stores the File object
Â  Â  });
Â  }
Â 
Â  // ðŸš¨ FIX: Corrected signature and logic for two file inputs
Â  onFileChange(event: Event, controlName: string): void {
Â  Â  const input = event.target as HTMLInputElement;
Â  Â  const file = input.files?.[0];
Â  Â  if (file) {
Â  Â  Â  // Update the specific form control with the File object
Â  Â  Â  this.form.get(controlName)?.setValue(file);
      // Mark as touched to show validation state
      this.form.get(controlName)?.updateValueAndValidity();
Â  Â  }
Â  }
Â 
Â submit(): void {
  if (this.form.invalid) {
    this.errorMessage = 'Please complete all required fields correctly.';
    return;
  }

  const formData = new FormData();
  const formValue = this.form.value;

  formData.append('UserId', formValue.userId.toString());
  formData.append('Address', formValue.address);
  formData.append('PinCode', Number(formValue.pinCode).toString());
  formData.append('FssaiId', formValue.fssaiId);
  formData.append('TradeId', formValue.tradeId);

  const fssaiFile = formValue.fssaiImage as File;
  const tradeFile = formValue.tradelicenseImage as File;

  if (fssaiFile) {
    formData.append('FssaiImage', fssaiFile, fssaiFile.name);
  }
  if (tradeFile) {
    formData.append('TradelicenseImage', tradeFile, tradeFile.name);
  }

  // âœ… Debug log
  for (const pair of formData.entries()) {
    console.log(`${pair[0]}:`, pair[1]);
  }

  this.restaurantService.submitRestaurantDetails(formData).subscribe({
    next: () => {
      this.successMessage = 'Details submitted successfully! You can now log in.';
      this.errorMessage = '';
      localStorage.clear();
      this.router.navigate(['/login']);
    },
    error: (err: any) => {
      console.error('Submission error:', err);
      if (err.status === 400 && err.error?.errors) {
        const validationErrors = Object.values(err.error.errors).flat().join('; ');
        this.errorMessage = `Validation Failed: ${validationErrors}`;
      } else {
        this.errorMessage = 'Submission failed. Please check your data and try again.';
      }
      this.successMessage = '';
    }
  });
}
}